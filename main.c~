#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include "list.h"
#include "datopersona.h"



typedef DList (*Sort) (DList, Comparacion);

void hoola(void*a, void*b){
  return;
}
// Achicar linea ->
void crear_salida(DList lista, char* fSalida, Sort fSort, Comparacion fCom) {
  // Variables usadas para calcular el timpo de ejecucion.
  clock_t start_t, end_t;
  // Creacion de la lista.
  // Se establece el momento de inicio de ejecucion del algoritmo.
  start_t = clock();
  // Ejecucion del mismo.
  lista = fSort(lista, fCom);
  //for(;lista->ant != NULL; lista = lista->ant);
  // Se establece el momento de fin de ejecucion del algoritmo.
  end_t = clock();
  // Se calcula el tiempo de ejecucion.
  double total = (double)(end_t - start_t) / CLOCKS_PER_SEC;
  // Abrimos archivo.
  FILE* fp = fopen(fSalida, "w");
  // Impirmimos el contenido de la lista.
  dlist_recorrer(lista, (Visitante) persona_imprimir , fp);
  // Se cuenta el largo de la lista (tal vez innecesario).
  int * largoL = calloc(1, sizeof(int));
  dlist_recorrer(lista, (Visitante) contar_largo, largoL);
  fprintf(fp,"\nEl algoritmo tardo %f s en ordenar una lista de %d elementos", total, *largoL);
  fclose(fp);
  free(largoL);
}



int main()
{
  DList lista = dlist_leer_crear("personas.txt");

  DList nueva = dlist_duplicar(lista);
  crear_salida(lista, "Resultados/selection1.txt", dlist_selectionSort, (Comparacion) comparacion_edad);
  dlist_destruir(nueva, NULL);

  nueva = dlist_duplicar(lista);
  crear_salida(lista, "Resultados/selection2.txt", dlist_selectionSort, (Comparacion) comparacion_nombre);
  dlist_destruir(nueva, NULL);



  dlist_destruir(lista, (Visitante) persona_destruir);

  return 0;
}

